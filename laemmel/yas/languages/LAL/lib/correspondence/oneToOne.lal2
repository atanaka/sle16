language Any1
language L1 <= Any1
relation partOf : L1 # L1
relation partOfPlus : L1 # L1
relation partOfStar : L1 # L1
axiom partAsym {
 forall x <- L1.
  forall y <- L1.
   (partOf(x, y)) => (~ (partOf(y, x)))
}
axiom partReflexive {
 forall x <- L1.
  partOfStar(x, x)
}
axiom partTransitive {
 forall x <- L1.
  forall y <- L1.
   ((partOf(x, y)) => (partOfPlus(x, y))) /\ (((partOfPlus(x, y)) => (partOfStar(x, y))) /\ (forall z <- L1.
                                                                                              ((partOfPlus(x, y)) /\ (partOfPlus(y, z))) => (partOfPlus(x, z))))
}
language Any2
language L2 <= Any2
relation partOf : L2 # L2
relation partOfPlus : L2 # L2
relation partOfStar : L2 # L2
axiom partAsym {
 forall x <- L2.
  forall y <- L2.
   (partOf(x, y)) => (~ (partOf(y, x)))
}
axiom partReflexive {
 forall x <- L2.
  partOfStar(x, x)
}
axiom partTransitive {
 forall x <- L2.
  forall y <- L2.
   ((partOf(x, y)) => (partOfPlus(x, y))) /\ (((partOfPlus(x, y)) => (partOfStar(x, y))) /\ (forall z <- L2.
                                                                                              ((partOfPlus(x, y)) /\ (partOfPlus(y, z))) => (partOfPlus(x, z))))
}
relation correspondsTo : L1 # L2
relation related : L1 # L2
axiom {
 forall a1 <- L1.
  forall a2 <- L2.
   ((related(a1, a2)) /\ ((forall b1 <- L1.
                            (partOf(b1, a1)) => (exists! b2 <- L2.
                                                  (partOf(b2, a2)) /\ (correspondsTo(b1, b2)))) /\ (forall b2 <- L2.
                                                                                                     (partOf(b2, a2)) => (exists! b1 <- L1.
                                                                                                                           (partOf(b1, a1)) /\ (correspondsTo(b1, b2)))))) => (correspondsTo(a1, a2))
}
