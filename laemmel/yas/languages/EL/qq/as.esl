// The same syntax as before
// ...
// BEGIN ...
// Expressions
symbol intconst : integer -> expr ;
symbol boolconst : boolean -> expr ;
symbol var : string -> expr ;
symbol unary : uop # expr -> expr ;
symbol binary : bop # expr # expr -> expr ;
// END ...
symbol metavar : string -> expr ; // An additional symbol for the abstract syntax
// BEGIN ...
// Unary operators
symbol negate : -> uop ;
symbol not : -> uop ;

// Binary operators
symbol add : -> bop ;
symbol sub : -> bop ;
symbol mul : -> bop ;
symbol lt : -> bop ;
symbol le : -> bop ;
symbol eq : -> bop ;
symbol geq : -> bop ;
symbol gt : -> bop ;
symbol and : -> bop ;
symbol or : -> bop ;
// END ...
