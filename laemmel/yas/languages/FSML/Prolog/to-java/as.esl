symbol class : visible # abstract # name # tpara* # extends # member* -> decl ;
symbol enum : visible # name # name+ -> decl ;
symbol public : -> visible ;
symbol protected : -> visible ;
symbol private : -> visible ;
type abstract = boolean ;
type name = string ;
type tpara = string ;
type extends = type? ;
symbol constr : visible # mpara* # statement* -> member ;
symbol method : visible # time # type # name # mpara* # statement* -> member ;
symbol assignment : expression # expression -> statement ;
symbol expression : expression -> statement ;
symbol this : -> expression ;
symbol null : -> expression ;
symbol name : name -> expression ;
symbol select : expression # name -> expression ;
symbol call : name # expression* -> expression ;
type mpara = type # name ;
symbol typename : name -> type ;
symbol typeapp : name # type* -> type ;
